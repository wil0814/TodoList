{"ast":null,"code":"var _jsxFileName = \"/Users/william/todo-list/clinet/src/Router/ProtectedRoutes.js\",\n  _s = $RefreshSig$();\nimport { useContext, useEffect, useState } from 'react';\nimport { useLocation, Outlet, Navigate } from 'react-router-dom';\nimport { AuthContext } from '../contexts';\nimport { getMe } from '../Model/LoginAPI';\nimport { getAuthToken } from '../Model/utils';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProtectedRoutes = () => {\n  _s();\n  // console.log(\"ProtectedRoutes\");\n  // // const {user, setUser} = useContext(AuthContext)\n  // // const [login, setLogin] = useState(false);\n  const location = useLocation();\n  // // console.log(\"userloggedin \"+login);\n  // const ANS = ()=>{\n  //     if(getAuthToken()){\n\n  //         return <Outlet/>;\n  //     }else{\n  //         return <Navigate to='/login' replace state={{ from: location }} />;\n  //     }\n  // }\n\n  // return <ANS/>;\n\n  const [auth, setAuth] = useState(false);\n  const [isTokenValidated, setIsTokenValidated] = useState(false);\n  let token = getAuthToken();\n\n  // useEffect(()=>{\n  //     let token = getAuthToken();\n  //     console.log(\"token\");\n  //     if(token){\n  //         getMe()\n  //         .then((json)=>{\n  //             if(json.success){\n  //                 setAuth(true);\n  //             }\n  //         })\n  //         .catch((err) => {\n  //             setAuth(false);\n  //             localStorage.removeItem(\"token\");\n  //           })\n  //         .then(() => setIsTokenValidated(true));\n  //     }else{\n  //         console.log(\"0000000000\");\n  //         setIsTokenValidated(true);\n  //     }\n  // },[])\n  // console.log(auth);\n  // if (!isTokenValidated) return <div>logining</div>;\n\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 12\n  }, this);\n};\n_s(ProtectedRoutes, \"IP7v2zWthqe6LYeGUuMHHAZikHY=\", false, function () {\n  return [useLocation];\n});\n_c = ProtectedRoutes;\nexport default ProtectedRoutes;\nvar _c;\n$RefreshReg$(_c, \"ProtectedRoutes\");","map":{"version":3,"names":["useContext","useEffect","useState","useLocation","Outlet","Navigate","AuthContext","getMe","getAuthToken","ProtectedRoutes","location","auth","setAuth","isTokenValidated","setIsTokenValidated","token"],"sources":["/Users/william/todo-list/clinet/src/Router/ProtectedRoutes.js"],"sourcesContent":["import { useContext, useEffect, useState } from 'react';\nimport {useLocation, Outlet, Navigate} from 'react-router-dom';\nimport { AuthContext } from '../contexts';\nimport {getMe} from '../Model/LoginAPI'\nimport { getAuthToken } from '../Model/utils'\n\n\n\nconst ProtectedRoutes = () => {\n    // console.log(\"ProtectedRoutes\");\n    // // const {user, setUser} = useContext(AuthContext)\n    // // const [login, setLogin] = useState(false);\n    const location = useLocation();\n    // // console.log(\"userloggedin \"+login);\n    // const ANS = ()=>{\n    //     if(getAuthToken()){\n\n    //         return <Outlet/>;\n    //     }else{\n    //         return <Navigate to='/login' replace state={{ from: location }} />;\n    //     }\n    // }\n\n\n    // return <ANS/>;\n\n    const [auth, setAuth] = useState(false);\n    const [isTokenValidated, setIsTokenValidated] = useState(false);\n    let token = getAuthToken();\n\n    // useEffect(()=>{\n    //     let token = getAuthToken();\n    //     console.log(\"token\");\n    //     if(token){\n    //         getMe()\n    //         .then((json)=>{\n    //             if(json.success){\n    //                 setAuth(true);\n    //             }\n    //         })\n    //         .catch((err) => {\n    //             setAuth(false);\n    //             localStorage.removeItem(\"token\");\n    //           })\n    //         .then(() => setIsTokenValidated(true));\n    //     }else{\n    //         console.log(\"0000000000\");\n    //         setIsTokenValidated(true);\n    //     }\n    // },[])\n    // console.log(auth);\n    // if (!isTokenValidated) return <div>logining</div>;\n\n    return <Outlet/>;\n}\nexport default ProtectedRoutes"],"mappings":";;AAAA,SAASA,UAAU,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AACvD,SAAQC,WAAW,EAAEC,MAAM,EAAEC,QAAQ,QAAO,kBAAkB;AAC9D,SAASC,WAAW,QAAQ,aAAa;AACzC,SAAQC,KAAK,QAAO,mBAAmB;AACvC,SAASC,YAAY,QAAQ,gBAAgB;AAAA;AAI7C,MAAMC,eAAe,GAAG,MAAM;EAAA;EAC1B;EACA;EACA;EACA,MAAMC,QAAQ,GAAGP,WAAW,EAAE;EAC9B;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAGA;;EAEA,MAAM,CAACQ,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EACvC,MAAM,CAACW,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EAC/D,IAAIa,KAAK,GAAGP,YAAY,EAAE;;EAE1B;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA,oBAAO,QAAC,MAAM;IAAA;IAAA;IAAA;EAAA,QAAE;AACpB,CAAC;AAAA,GA9CKC,eAAe;EAAA,QAIAN,WAAW;AAAA;AAAA,KAJ1BM,eAAe;AA+CrB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}